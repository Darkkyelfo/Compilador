STATE -> IF STATE
STATE -> WHILE STATE
STATE -> ATRIBUICAO STATE
STATE -> DEF STATE
STATE -> FUNCTIONCALL STATE
STATE -> RETORNO NEWLINES
STATE -> break NEWLINES STATE
STATE -> continue NEWLINES STATE
STATE -> NEWLINES STATE
STATE -> numero OPERACOES_ARITMETICAS NEWLINES STATE
STATE -> e
ATRIBUICAO -> id = EXPRESSAO_LOGICA NEWLINES 
IF -> if ( EXPRESSAO_LOGICA ) { NEWLINES STATE } ELSE 
ELSE -> else { NEWLINES STATE } NEWLINES 
ELSE -> e
WHILE -> while ( EXPRESSAO_LOGICA ) { NEWLINES STATE  } 
DEF -> def funcId ( PARAMETROS ) { NEWLINES STATE } 
RETORNO -> return VALORES
VALORES -> id 
VALORES -> True 
VALORES -> False 
VALORES -> numero
PARAMETROS -> VALORES VIRGULA
PARAMETROS -> e
VIRGULA -> , VALORES VIRGULA
VIRGULA -> e
FUNCTIONCALL -> funcId ( PARAMETROS ) NEWLINES 
EXPRESSAO_ARITMETICA -> id OPERACOES_ARITMETICAS 
EXPRESSAO_ARITMETICA -> numero OPERACOES_ARITMETICAS
OPERACOES_ARITMETICAS -> + EXPRESSAO_ARITMETICA
OPERACOES_ARITMETICAS -> - EXPRESSAO_ARITMETICA   
OPERACOES_ARITMETICAS -> * EXPRESSAO_ARITMETICA
OPERACOES_ARITMETICAS -> / EXPRESSAO_ARITMETICA   
OPERACOES_ARITMETICAS -> e
EXPRESSAO_LOGICA -> True 
EXPRESSAO_LOGICA -> False 
EXPRESSAO_LOGICA -> EXPRESSAO_ARITMETICA  OPERADOR_LOGICO 
OPERADOR_LOGICO  -> == EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> > EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> < EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> >= EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> <= EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> != EXPRESSAO_ARITMETICA
OPERADOR_LOGICO  -> e
NEWLINES -> newline NEWLINE_SEQ
NEWLINE_SEQ -> NEWLINES
NEWLINE_SEQ -> e
